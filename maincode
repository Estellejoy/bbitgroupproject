#include <iostream>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

struct Match {
    string homeTeam;
    string awayTeam;
    string stadium;
    string town;
    int leg;
    int weekend;
};

vector<string> teams;
vector<string> towns;
vector<string> stadiums;

// Generates match fixtures and populates the provided vector with match details.
// The function creates both cross-town and local matches, 
// adding them to the fixtures vector by reference to avoid unnecessary copies.
void generateFixtures(vector<Match>& fixtures)
{
    int weekend = 1;

    // Cross-town matches first
    for (int i = 0; i < 5; i++) {
        for (int j = 5; j < 10; j++) {
            // First leg
            fixtures.push_back({teams[i], teams[j], stadiums[i], towns[i], 1, weekend});
            // Second leg
            fixtures.push_back({teams[j], teams[i], stadiums[j], towns[j], 2, weekend + 5});

            // Increment weekend after every 2 matches
            if (fixtures.size() % 2 == 0) {
                weekend++;
            }
        }
    }

    // Local town matches
    for (int i = 0; i < 5; i++) {
        for (int j = i + 1; j < 5; j++) {
            // First leg
            fixtures.push_back({teams[i], teams[j], stadiums[i], towns[i], 1, weekend});
            fixtures.push_back({teams[j], teams[i], stadiums[j], towns[j], 2, weekend});

            // Increment weekend after every 2 matches
            if (fixtures.size() % 2 == 0) {
                weekend++;
            }
        }
    }
}

void writeFixtures( vector<Match>& fixtures) {
    ofstream matches("fixtures.csv");
    matches << "Weekend,Home Team,Away Team,Stadium,Leg" << endl;

    for (int i=0;i<fixtures.size();i++)
        {
        const Match&match=fixtures[i];//// Reference the current match from the fixtures vector
        matches << match.weekend << ","
                << match.homeTeam << ","
                << match.awayTeam << ","
                << match.stadium << ","
                << match.leg << endl;
    }
}

void display_fixtures(vector<Match>& fixtures) {
    for (int i=0;i<fixtures.size();i++)
    {
        const Match&match=fixtures[i];
        cout << "Weekend: " << match.weekend<< "\n"<< match.homeTeam << endl<< "vs""\t"<< match.awayTeam << endl;
        cout << "Stadium: " << match.stadium << endl;
        cout << "Leg: " << match.leg << endl;
        cout << "---------------------" << endl;
    }
}

int main() {
    ifstream ip("/Users/onyan/OneDrive/Documents/teams_csvFile.csv");
    if (!ip.is_open()) {
        cout << "Error opening file" << endl;
        return 1; // Exit if the file cannot be opened
    }

    string Teamname;
    string Localtown;
    string Teamstadium;

    // Read lines until the end of the file
    while (getline(ip, Teamname, ',') &&
           getline(ip, Localtown, ',') &&
           getline(ip, Teamstadium)) {
        // Store the read values into the corresponding vectors
        teams.push_back(Teamname);
        towns.push_back(Localtown);
        stadiums.push_back(Teamstadium);

        cout << "Team name: " << Teamname << "\n"
             << "Local town: " << Localtown << "\n"
             << "Team stadium: " << Teamstadium << "\n"
             << "---------------------" << "\n";
    }

    ip.close(); // Close the file

    vector<Match> fixtures; // Declare the fixtures vector
    generateFixtures(fixtures); // Populate the fixtures
    writeFixtures(fixtures); // Write fixtures to CSV
    display_fixtures(fixtures); // Display fixtures

    return 0;
}
