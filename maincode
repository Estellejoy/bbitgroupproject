#include <iostream>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

struct Match {
    string homeTeam;
    string awayTeam;
    string stadium;
    string town;
    int leg;
    int weekend;
};

vector<string> teams = {"CKlein Stars", "Dolphins FC", "Wolves FC", "Sea Horses FC", "Falcons FC",
                        "Eagles FC", "Lions FC", "Sharks FC", "Tigers FC", "Bulls FC"};
vector<string> towns = {"Nairobi", "Nairobi", "Mombasa", "Mombasa", "Mombasa",
                        "Kisumu", "Kisumu", "Thika", "Thika", "Nakuru", "Nakuru"};
vector<string> stadiums = {"CKlein Stadium", "Dolphins Arena", "Wolves Den", "Sea Horses Park", "Falcons Field",
                           "Eagles Nest", "Lions Stadium", "Sharks Bay", "Tigers Ground", "Bulls Dome"};

void generateFixtures(vector<Match>& fixtures) {
    int weekend = 1;
    // Cross-town matches first 
    for (int i = 0; i < 5; ++i) {
        for (int j = 5; j < 10; ++j) {
            // First leg
            fixtures.push_back({teams[i], teams[j], stadiums[i], towns[i], 1, weekend});
            // Second leg
            fixtures.push_back({teams[j], teams[i], stadiums[j], towns[j], 2, weekend + 5});

            // Increment weekend after every 2 matches
            if (fixtures.size() % 2 == 0) {
                weekend++;
            }
        }
    }

    // Local town matches
    for (int i = 0; i < 5; i++) {
        for (int j = i + 1; j < 5; j++) {
            // First leg 
            fixtures.push_back({teams[i], teams[j], stadiums[i], towns[i], 1, weekend});
            fixtures.push_back({teams[j], teams[i], stadiums[j], towns[j], 2, weekend + 5});

            // First leg 
            fixtures.push_back({teams[i + 5], teams[j + 5], stadiums[i + 5], towns[i + 5], 1, weekend});
            fixtures.push_back({teams[j + 5], teams[i + 5], stadiums[j + 5], towns[j + 5], 2, weekend + 5});

            // Increment weekend after every 2 matches
            if (fixtures.size() % 2 == 0) {
                weekend++;
            }
        }
    }
}

void outputFixturesToConsoleAndFile(const vector<Match>& fixtures) {
    ofstream outFile("fixtures.csv");
    if (!outFile)//error handling
{
        cerr << "Error creating file!" << endl;
        return;
    }
//printing the fixture header to both the console and the file
    cout << "Fixtures:\n";
    outFile << "Fixtures:\n";
    for (const auto& match : fixtures) //loop iterates over each match in the fixtures vector
{
//hence for every match it constructs a string that includes  weekend number,home team, away team,stadium name,town name and leg number
        string fixture = "Weekend #" + to_string(match.weekend) + ": " +//to string is used to convert numerical values to strings
                         match.homeTeam + " vs " + match.awayTeam +
                         " at " + match.stadium + " (" + match.town + "), Leg " + to_string(match.leg);

        cout << fixture << endl;
        outFile << fixture << endl;
    }

    outFile.close();
}

int main() {
 //opening the csv file
    ifstream ip("/Users/onyan/OneDrive/Documents/teams_csvFile.csv");
    if(!ip.is_open()) cout<<"error" <<endl;


    string Teamname;
    string Localtown;
    string Teamstadium;

    while(ip.good())//runs until we get all data from the file
    {
        getline(ip,Teamname,',');
        getline(ip,Localtown,',');
        getline(ip,Teamstadium,'\n');
        cout<<"Team name-"<<Teamname<<"\n";
        cout<<"Local town- "<<Localtown<<"\n";
        cout<<"Team stadium-"<<Teamstadium<<"\n";
        cout<<"......................"<<"\n";
    }

    ip.close();//function to close the file
    vector<Match> fixtures;
    generateFixtures(fixtures);
    outputFixturesToConsoleAndFile(fixtures);
    return 0;
}
